import textwrap  # Importa o m√≥dulo textwrap, que ser√° usado para remover a indenta√ß√£o do texto.

# Fun√ß√£o para exibir o menu
def menu():
    menu_texto = '''\n
   ‚ô¶Ô∏è  Sistema Banc√°rio  ‚ô¶Ô∏è 

    -----ü•á MENU ü•á-----

    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usu√°rio
    [q]\tSair

    ---------------------

    üëâ  '''
    # Exibe o menu com as op√ß√µes e retorna a entrada do usu√°rio
    return input(textwrap.dedent(menu_texto))

# Fun√ß√£o para depositar dinheiro
def depositar(saldo, valor, extrato, /):
    # Verifica se o valor a ser depositado √© maior que zero
    if valor > 0:
        # Adiciona o valor ao saldo
        saldo += valor
        # Adiciona a transa√ß√£o ao extrato
        extrato += f"Dep√≥sito: +R${valor:.2f}\n"
        print("\n=== Dep√≥sito realizado com sucesso!ü§ë ===")
    else:
        # Caso o valor seja inv√°lido (n√£o positivo), exibe uma mensagem de erro
        print("\n@@@ Opera√ß√£o falhou! O valor informado √© inv√°lido. @@@")

    # Retorna o saldo atualizado e o extrato
    return saldo, extrato

# Fun√ß√£o para sacar dinheiro
def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):
    # Verifica se o valor do saque excede o saldo
    excedeu_saldo = valor > saldo
    # Verifica se o valor do saque excede o limite
    excedeu_limite = valor > limite
    # Verifica se o n√∫mero de saques excede o limite di√°rio
    excedeu_saques = numero_saques >= limite_saques

    if excedeu_saldo:
        print("\n@@@ Opera√ß√£o falhou! Saldo insuficiente. @@@")
    elif excedeu_limite:
        print("\n@@@ Opera√ß√£o falhou! O valor do saque excede o limite. @@@")
    elif excedeu_saques:
        print("\n@@@ Opera√ß√£o falhou! O n√∫mero de saques excede o limite. @@@")
    elif valor > 0:
        # Deduz o valor do saque do saldo
        saldo -= valor
        # Adiciona a transa√ß√£o ao extrato
        extrato += f"Saque: -R${valor:.2f}\n"
        # Incrementa o n√∫mero de saques realizados
        numero_saques += 1
        print("\n=== Saque realizado com sucesso! ===")
    else:
        print("\n@@@ Opera√ß√£o falhou! O valor informado √© inv√°lido. @@@")

    # Retorna o saldo atualizado, o extrato e o n√∫mero de saques
    return saldo, extrato, numero_saques

# Fun√ß√£o para exibir o extrato
def exibir_extrato(saldo, /, *, extrato):
    print("\n========== Extrato ==========\n")
    # Exibe uma mensagem caso n√£o haja movimenta√ß√µes, ou o extrato das transa√ß√µes
    print("N√£o foram realizadas movimenta√ß√µes." if not extrato else extrato)
    # Exibe o saldo atual
    print(f"Saldo atual: R${saldo : .2f}\n")
    print("=============================")

# Fun√ß√£o para criar um novo usu√°rio
def criar_usuario(usuarios):
    cpf = input('Informe o CPF (somente n√∫mero): ')
    # Verifica se o usu√°rio j√° existe na lista de usu√°rios
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("\n@@@ Opera√ß√£o falhou! O usu√°rio j√° existe. @@@")
        return
    
    # Coleta as informa√ß√µes do novo usu√°rio
    nome = input('Informe o nome completo: ')
    data_nascimento = input('Informe a data de nascimento (dd/mm/aaaa): ')
    endereco = input('Informe o endere√ßo (logradouro, Nro - bairro - cidade/sigla estado): ')

    # Adiciona o novo usu√°rio √† lista de usu√°rios
    usuarios.append({
        'nome': nome,
        'data_nascimento': data_nascimento,
        'cpf': cpf,
        'endereco': endereco,
    })
    print("\n=== Usu√°rio criado com sucesso! ===")

# Fun√ß√£o para filtrar usu√°rio pelo CPF
def filtrar_usuario(cpf, usuarios):
    # Filtra a lista de usu√°rios para encontrar um usu√°rio com o CPF fornecido
    usuarios_filtrados = [usuario for usuario in usuarios if usuario['cpf'] == cpf]
    # Retorna o primeiro usu√°rio encontrado, ou None se n√£o houver correspond√™ncia
    return usuarios_filtrados[0] if usuarios_filtrados else None

# Fun√ß√£o para criar uma nova conta
def criar_conta(agencia, numero_conta, usuarios):
    cpf = input('Informe o CPF do usu√°rio: ')
    # Verifica se o usu√°rio com o CPF fornecido existe na lista de usu√°rios
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("\n=== Conta criada com sucesso! ===\n")
        # Retorna um dicion√°rio com os dados da conta criada
        return {
            'agencia': agencia,
            'numero_conta': numero_conta,
            'usuario': usuario,
        }
    print("\n@@@ Opera√ß√£o falhou! Usu√°rio n√£o encontrado. @@@")

# Fun√ß√£o para listar todas as contas
def listar_contas(contas):
    for conta in contas:
        # Formata os detalhes da conta para exibi√ß√£o
        linha = f"""\
        Ag√™ncia:\t{conta['agencia']}
        C/C:\t\t{conta['numero_conta']}
        Titular:\t{conta['usuario']['nome']}
        Endere√ßo:\t{conta['usuario']['endereco']}
        """
        print('=' * 50)
        print(textwrap.dedent(linha))

# Fun√ß√£o principal para controlar o fluxo do sistema
def main():
    LIMITE_SAQUE = 3  # Limite di√°rio de saques
    AGENCIA = '0001'  # N√∫mero da ag√™ncia banc√°ria

    saldo = 0  # Saldo inicial
    limite = 500  # Limite de saque
    extrato = ""  # Extrato inicial
    numero_saques = 0  # Contador de saques
    usuarios = []  # Lista de usu√°rios
    contas = []  # Lista de contas
    numero_conta = 1  # Contador para n√∫mero de contas

    while True:
        # Exibe o menu e coleta a op√ß√£o selecionada
        opcao = menu()

        if opcao == 'd':
            # Depositar
            try:
                # Coleta o valor a ser depositado
                valor = float(input('\nInforme o valor do dep√≥sito:üí∞ '))
                # Chama a fun√ß√£o de dep√≥sito
                saldo, extrato = depositar(saldo, valor, extrato)
            except ValueError:
                print("\n@@@ Entrada inv√°lida! Por favor, insira um valor num√©rico. @@@")

        elif opcao == 's':
            # Sacar
            try:
                # Coleta o valor a ser sacado
                valor = float(input('\nInforme o valor do saque:üí∏ '))
                # Chama a fun√ß√£o de saque
                saldo, extrato, numero_saques = sacar(
                    saldo=saldo,
                    valor=valor,
                    extrato=extrato,
                    limite=limite,
                    numero_saques=numero_saques,
                    limite_saques=LIMITE_SAQUE
                )
            except ValueError:
                print("\n@@@ Entrada inv√°lida! Por favor, insira um valor num√©rico. @@@")

        elif opcao == 'e':
            # Mostrar Extrato
            # Chama a fun√ß√£o de exibi√ß√£o de extrato
            exibir_extrato(saldo, extrato=extrato)

        elif opcao == 'nu':
            # Criar Usu√°rio
            # Chama a fun√ß√£o de cria√ß√£o de usu√°rio
            criar_usuario(usuarios)

        elif opcao == 'nc':
            # Criar Conta
            # Chama a fun√ß√£o de cria√ß√£o de conta
            conta = criar_conta(AGENCIA, numero_conta, usuarios)
            if conta:
                # Adiciona a nova conta √† lista de contas e incrementa o n√∫mero de contas
                contas.append(conta)
                numero_conta += 1

        elif opcao == 'lc':
            # Listar Contas
            # Chama a fun√ß√£o de listagem de contas
            listar_contas(contas)

        elif opcao == 'q':
            # Sair
            print("\nSaindo do sistema. At√© logo!üëã\n")
            break

        else:
            print('Op√ß√£o inv√°lida, por favor selecione novamente a opera√ß√£o desejada.')

# Executa o programa se o script for executado diretamente
if __name__ == "__main__":
    main()


